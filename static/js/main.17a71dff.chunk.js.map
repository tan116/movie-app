{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["Board","state","movies","focusedContactKey","messageInput","searchValue","yearValue","searchType","errorMessage","favorites","key","imdbID","this","includes","splice","indexOf","push","setState","localStorage","setItem","join","undefined","length","map","data","className","onClick","focusMovie","src","Poster","alt","Title","Year","toggleFav","type","name","placeholder","onChange","text","target","value","onKeyPress","handleKeyPress","e","fetchMovies","style","overflowY","renderMovies","persistantFavs","getItem","split","searchKeywords","url","isNumeric","toLowerCase","fetch","then","response","json","Error","Search","isLoading","catch","error","test","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17a71dff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Board extends Component {\n\n    constructor() {\n      super();\n      this.state = {\n          movies: [],\n          focusedContactKey: '-1',\n          messageInput: '',\n          searchValue: '',\n          yearValue: '',\n          searchType: 'all',\n          errorMessage: '',\n          favorites: [],\n      }\n    }\n  \n    focusMovie(key) {\n\n    }\n\n    toggleFav(key, imdbID) { // key to change it in current view, imdbID to make change persistant\n        var favorites = this.state.favorites;\n        if (favorites.includes(imdbID)) {\n            favorites.splice( favorites.indexOf(imdbID), 1 );\n        } else {\n            favorites.push(imdbID);\n        }\n        this.setState({favorites: favorites});\n        localStorage.setItem('favorites', favorites.join(','));\n    }\n\n    renderMovies() {\n        if(this.state.movies !== undefined && this.state.movies.length > 0)\n            return this.state.movies.map((data, key) => {\n                    return (\n                        <div className=\"MovieListItem\"\n                                key = {key}\n                                onClick={() => this.focusMovie(key)}>\n                            <img className=\"MovieImage\" src={data.Poster} alt={data.Title + ' poster'}></img>\n                            <div className=\"MovieItemTextContainer\">\n                                <div className=\"MovieName\">{data.Title}</div>\n                                <div className=\"MovieYear\">{data.Year}</div>\n                                <div className=\"MovieFavoriteButton\">\n                                    {this.state.favorites.includes(data.imdbID) ? <div className=\"UnFavoriteButton\" onClick={()=>{this.toggleFav(key,data.imdbID)}}>UnFavorite</div> : <div className=\"FavoriteButton\" onClick={()=>{this.toggleFav(key,data.imdbID)}}>Favorite</div>}\n                                </div>\n                            </div>\n                        </div>\n                    )\n            })\n        else\n            return (\n                <div>{this.state.errorMessage}</div>\n            )\n    }\n\n    render() {\n        return (\n        <div className=\"Board\">\n            <div className=\"SearchInputContainer\">\n                <input type=\"text\"\n                        name=\"body\"\n                        className=\"SearchInput\"\n                        placeholder=\"Search for movies, tv shows\"\n                        onChange={(text) => {this.setState({searchValue: text.target.value});}}\n                        onKeyPress={this.handleKeyPress}\n                        value={this.state.searchValue}/>\n                <input type=\"text\"\n                        name=\"body\"\n                        className=\"YearInput\"\n                        placeholder=\"Year\"\n                        onChange={(text) => {this.setState({yearValue: text.target.value});}}\n                        onKeyPress={this.handleKeyPress}\n                        value={this.state.yearValue}/>\n                <select className=\"TypeDropdown\" onChange={(e) => {this.setState({searchType: e.target.value});}}>\n                    <option>All</option>\n                    <option>Movie</option>\n                    <option>Series</option>\n                    <option>Episode</option>\n                </select>\n                <button className=\"SearchButton\" onClick={() => {this.fetchMovies()}}>Search</button>\n            </div>\n            <div className=\"MoviesContainer\" style={{overflowY: 'auto'}}>\n                <div className=\"MovieListContainer\">{this.renderMovies()}</div>\n            </div>\n        </div>\n        );\n    }\n\n    componentDidMount() {\n        var persistantFavs = localStorage.getItem('favorites');\n        if (persistantFavs !== undefined && persistantFavs !== '' && persistantFavs !== null)\n            this.setState({favorites: persistantFavs.split(',')});\n        else\n            this.setState({favorites: []});\n    }\n\n    fetchMovies() {\n        // Where we're fetching data from\n        var searchValue = this.state.searchValue;\n        var yearValue = this.state.yearValue;\n        var type = this.state.searchType;\n\n        var searchKeywords = searchValue.split(' ');\n        searchValue = searchKeywords.join('+');\n\n        var url = 'https://www.omdbapi.com/?apikey=498c779a';\n        if(searchValue !== undefined && searchValue.length !== 0)\n            url += '&s=' + searchValue;\n        if(yearValue !== undefined && yearValue.length !== 0 && this.isNumeric(yearValue) && yearValue.length === 4)\n            url += '&y=' + yearValue;\n        if(type !== '' && type !== undefined && type.toLowerCase() !== 'all')\n            url += '&type='+type;\n\n        fetch(url)\n          // We get the API response and receive data in JSON format...\n          .then(response => response.json())\n          // ...then we update the users state\n          .then((data) => {\n            // console.log(\"response = \" + JSON.stringify(data));\n            if(data.Error !== undefined)\n                this.setState({errorMessage: data.Error, movies: []});\n            else\n                this.setState({\n                    movies: data.Search,\n                    isLoading: false,\n                })\n        })\n          // Catch any errors we hit and update the app\n          .catch(error => this.setState({ error, isLoading: false }));\n      }\n\n    isNumeric(value) {\n        return /^\\d+$/.test(value);\n    }\n  }\n  \n  export default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Board.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"MainContainer\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}